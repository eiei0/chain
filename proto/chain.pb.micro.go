// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/chain.proto

package chain

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Chain service

func NewChainEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Chain service

type ChainService interface {
	CreateChain(ctx context.Context, in *CreateChainRequest, opts ...client.CallOption) (*CreateChainResponse, error)
}

type chainService struct {
	c    client.Client
	name string
}

func NewChainService(name string, c client.Client) ChainService {
	return &chainService{
		c:    c,
		name: name,
	}
}

func (c *chainService) CreateChain(ctx context.Context, in *CreateChainRequest, opts ...client.CallOption) (*CreateChainResponse, error) {
	req := c.c.NewRequest(c.name, "Chain.CreateChain", in)
	out := new(CreateChainResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Chain service

type ChainHandler interface {
	CreateChain(context.Context, *CreateChainRequest, *CreateChainResponse) error
}

func RegisterChainHandler(s server.Server, hdlr ChainHandler, opts ...server.HandlerOption) error {
	type chain interface {
		CreateChain(ctx context.Context, in *CreateChainRequest, out *CreateChainResponse) error
	}
	type Chain struct {
		chain
	}
	h := &chainHandler{hdlr}
	return s.Handle(s.NewHandler(&Chain{h}, opts...))
}

type chainHandler struct {
	ChainHandler
}

func (h *chainHandler) CreateChain(ctx context.Context, in *CreateChainRequest, out *CreateChainResponse) error {
	return h.ChainHandler.CreateChain(ctx, in, out)
}
